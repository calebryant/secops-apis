{
    "schemes": [],
    "swagger": "2.0",
    "info": {
        "description": "",
        "title": "",
        "contact": {},
        "version": ""
    },
    "host": "",
    "basePath": "/v1",
    "paths": {
        "/accept-eula": {
            "put": {
                "summary": "Accepts the current EULA",
                "responses": {
                    "204": {
                        "description": "Successful acceptance, no content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/accounts": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "List Accounts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AccountsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new account",
                "parameters": [
                    {
                        "description": "the display name of the new account",
                        "name": "displayName",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.NewAccountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "produces": [
                    "application/json"
                ],
                "summary": "Update Account Metadata",
                "parameters": [
                    {
                        "description": "New display name for the account",
                        "name": "displayName",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AccountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/accounts/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get account by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the id of the account",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AccountResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete account by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the id of the account to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Delete, no content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/agent-versions": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "List agent versions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AgentVersionsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/agent-versions/{name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get agent version by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the agent version",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AgentVersionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "summary": "DEPRECATED: Delete agent version by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the agent version to delete",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "308": {
                        "description": "Will return the URL to the system API endpoint",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/agent-versions/{version}/install-command": {
            "get": {
                "description": "Get the proper install command for the provided parameters.",
                "produces": [
                    "application/json"
                ],
                "summary": "Get Install Command",
                "parameters": [
                    {
                        "type": "string",
                        "description": "2.1.1",
                        "name": "version",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "uuid",
                        "name": "secret-key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "http%3A%2F%2Flocalhost%3A3001",
                        "name": "remote-url",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "windows-amd64",
                        "name": "platform",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "env=stage,app=bindplane",
                        "name": "labels",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "observiq-otel-collector",
                        "name": "agent-type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.InstallCommandResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/agent-versions/{version}/sync": {
            "post": {
                "description": "Create an agent-version from the contents of a github release.",
                "produces": [
                    "application/json"
                ],
                "summary": "Sync Agent Version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "2.1.1",
                        "name": "version",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/model.ApplyResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/agents": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "List Agents",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the query to filter agents by, e.g. name:agent-1",
                        "name": "query",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "the selector to filter agents by, e.g. configuration=my-config",
                        "name": "selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "the pagination offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "the maximum number of results to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "the field on which to sort results. A '-' prefix indicates descending sorting.",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AgentsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "summary": "Delete agents by ids",
                "parameters": [
                    {
                        "description": "list of agent ids to delete",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.DeleteAgentsPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.DeleteAgentsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/agents/labels": {
            "patch": {
                "produces": [
                    "application/json"
                ],
                "summary": "Bulk apply labels to agents",
                "parameters": [
                    {
                        "description": "Request body containing agent IDs and labels",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.BulkAgentLabelsPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BulkAgentLabelsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/agents/version": {
            "patch": {
                "summary": "Update multiple agents",
                "parameters": [
                    {
                        "description": "request body containing ids and version",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PatchAgentVersionsRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Upgrade request processed, no content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/agents/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get agent by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the id of the agent",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AgentResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/agents/{id}/configuration": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get configuration for a given agent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the id of the agent",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ConfigurationResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/agents/{id}/labels": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get agent labels by agent id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the id of the agent",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AgentLabelsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "produces": [
                    "application/json"
                ],
                "summary": "Patch agent labels by agent id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the id of the agent",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "if true, overwrite any existing labels with the same names",
                        "name": "overwrite",
                        "in": "query"
                    },
                    {
                        "description": "Labels to be merged with existing labels, empty values will delete existing labels",
                        "name": "labels",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AgentLabelsPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AgentLabelsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/agents/{id}/version": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "summary": "Upgrade agent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the id of the agent",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "request body containing version",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PostAgentVersionRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Upgrade request processed, no content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "If the agent does not support upgrade",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/apply": {
            "post": {
                "description": "The /apply route will try to parse resources\nand upsert them into the store.",
                "produces": [
                    "application/json"
                ],
                "summary": "Create, edit, and configure multiple resources.",
                "parameters": [
                    {
                        "description": "Resources",
                        "name": "resources",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ApplyPayload"
                            }
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/model.ApplyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/audit-events": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get audit events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the configuration",
                        "name": "configuration-name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "User associated with the audit event",
                        "name": "user",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Minimum date for the audit event query in YYYYMMDDHHMMSS format",
                        "name": "min-date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum date for the audit event query in YYYYMMDDHHMMSS format",
                        "name": "max-date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.AuditEvent"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/audit-events/download": {
            "get": {
                "produces": [
                    "application/octet-stream"
                ],
                "summary": "Download audit events in CSV format",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the configuration",
                        "name": "configuration-name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "User associated with the audit event",
                        "name": "user",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Minimum date for the audit event query in YYYYMMDDHHMMSS format",
                        "name": "min-date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum date for the audit event query in YYYYMMDDHHMMSS format",
                        "name": "max-date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns an octet-stream of the requested CSV file"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/configurations": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "List Configurations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ConfigurationsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/configurations/{name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get Configuration by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the Configuration",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ConfigurationResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete configuration by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the configuration to delete",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Delete, no content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/configurations/{name}/copy": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "summary": "Duplicate an existing configuration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the configuration to duplicate",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "the desired name of the duplicate configuration",
                        "name": "name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful Copy, created"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/configurations/{name}/revert": {
            "put": {
                "summary": "Revert configuration to the current stable version.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the configuration to revert",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Revert, no content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "The latest version cannot be reverted, i.e. it has been rolled out.",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/delete": {
            "post": {
                "description": "/delete endpoint will try to parse resources\nand delete them from the store.",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete multiple resources",
                "parameters": [
                    {
                        "description": "Resources",
                        "name": "resources",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.DeletePayload"
                            }
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/model.DeleteResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/destination-types": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "List destination types",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.DestinationTypesResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/destination-types/{name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get destination type by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the destination type",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.DestinationTypeResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete destination type by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the destination type to delete",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Delete, no content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/destinations": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "List Destinations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.DestinationsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/destinations/{name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get Destination by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the Destination",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.DestinationResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete destination by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the destination to delete",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Delete, no content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/extension-types": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "List extension types",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ExtensionTypesResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/extension-types/{name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get extension type by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the extension type",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ExtensionTypeResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete extension type by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the extension type to delete",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Delete, no content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/extensions": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "List Extensions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ExtensionsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/extensions/{name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get Extension by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the Extension",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ExtensionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete extension by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the extension to delete",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Delete, no content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/organization-license": {
            "put": {
                "description": "Receives a new license key via JSON, decodes it, verifies its validity, and updates the organization's license in the system if it is valid.",
                "produces": [
                    "application/json"
                ],
                "summary": "Update Organization License Key",
                "parameters": [
                    {
                        "description": "Payload containing the new license key",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateOrganizationLicenseKeyPayload"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content - License key successfully updated"
                    },
                    "400": {
                        "description": "Bad Request - Invalid JSON, empty license key, or validation failure of the license key",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failure in updating the license or unable to retrieve organization info from context",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/organizations": {
            "get": {
                "summary": "Get organizations the user belongs to",
                "responses": {
                    "200": {
                        "description": "OK - The organizations the user belongs to",
                        "schema": {
                            "$ref": "#/definitions/model.GetOrganizationsResponse"
                        }
                    },
                    "500": {
                        "description": "Status Internal Server Error - Failed to retrieve organizations or other severe errors",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "This endpoint allows creating a new organization along with a new account and establishes necessary bindings between them.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Insert a new organization and account",
                "parameters": [
                    {
                        "description": "Payload to create organization and account",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.InsertOrganizationPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contains the organization and account that was created",
                        "schema": {
                            "$ref": "#/definitions/model.InsertOrganizationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - JSON parsing error or missing fields",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Failed to create organization or account",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to apply bindings or other server errors",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/organizations/accounts": {
            "get": {
                "summary": "Get all accounts associated with the organization by id",
                "responses": {
                    "200": {
                        "description": "OK - Contains an array of accounts associated with the organization",
                        "schema": {
                            "$ref": "#/definitions/model.AccountsForOrganizationResponse"
                        }
                    },
                    "403": {
                        "description": "Status Forbidden - User does not have permission to retrieve accounts",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Status Internal Server Error - Failed to retrieve accounts or other severe errors",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/organizations/users": {
            "get": {
                "summary": "Get all users associated with the organization by id",
                "responses": {
                    "200": {
                        "description": "OK - Contains an array of users associated with the organization",
                        "schema": {
                            "$ref": "#/definitions/model.UsersForOrganizationResponse"
                        }
                    },
                    "403": {
                        "description": "Status Forbidden - User does not have permission to retrieve users",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Status Internal Server Error - Failed to retrieve users or other severe errors",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/organizations/verify": {
            "put": {
                "description": "Verifies whether the provided display name for an organization is already used by any existing organization.",
                "produces": [
                    "application/json"
                ],
                "summary": "Check Organization Display Name Usage",
                "parameters": [
                    {
                        "description": "Payload containing the display name to check",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.VerifyOrganizationPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Contains a boolean indicating if the display name is in use",
                        "schema": {
                            "$ref": "#/definitions/model.VerifyOrganizationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or data types",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Error processing the request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/organizations/{id}": {
            "delete": {
                "summary": "Delete organization by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the id of the organization to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Delete, no content"
                    },
                    "403": {
                        "description": "Status Forbidden - User does not have permission to delete",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Status Internal Server Error - Failed to delete organization or other severe errors",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/organizations/{id}/metadata": {
            "patch": {
                "description": "Updates the display name of the organization specified by the ID.",
                "produces": [
                    "application/json"
                ],
                "summary": "Update Organization Display Name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the organization",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Payload containing the new display name",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PatchOrganizationPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Display name updated successfully"
                    },
                    "400": {
                        "description": "Bad Request - Invalid input, data types, or missing fields",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Authentication required or failed",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Organization not found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Error processing the request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/organizations/{name}": {
            "get": {
                "summary": "Get organization by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the organization to retrieve",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - The organization requested by name",
                        "schema": {
                            "$ref": "#/definitions/model.GetOrganizationResponse"
                        }
                    },
                    "500": {
                        "description": "Status Internal Server Error - Failed to retrieve organization or other severe errors",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/processor-types": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "List processor types",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ProcessorTypesResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/processor-types/{name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get processor type by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the processor type",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ProcessorTypeResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete processor type by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the processor type to delete",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Delete, no content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/processors": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "List Processors",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ProcessorsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/processors/{name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get Processor by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the Processor",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ProcessorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete processor by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the processor to delete",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Delete, no content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/recommendation-types": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "List recommendation types",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.RecommendationTypesResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/recommendation-types/{name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get recommendation type by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the recommendation type",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.RecommendationTypeResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "summary": "Delete recommendation type by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the recommendation type to delete",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Delete, no content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/resources/{kind}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "List resources by kind",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the kind of the resource",
                        "name": "kind",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ResourcesResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/resources/{kind}/{name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get a resource by kind and name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the kind of the resource",
                        "name": "kind",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the name of the resource",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ResourceResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "summary": "Delete a resource by kind and name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the kind of the resource",
                        "name": "kind",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the name of the resource",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Delete, no content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/rollouts": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get all rollouts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ConfigurationsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "produces": [
                    "application/json"
                ],
                "summary": "Update all active rollouts",
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/model.ConfigurationsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/rollouts/{name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get rollout configuration by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the configuration",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ConfigurationResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/rollouts/{name}/pause": {
            "put": {
                "produces": [
                    "application/json"
                ],
                "summary": "Pause rollout by configuration name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the configuration",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/model.ConfigurationResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/rollouts/{name}/resume": {
            "put": {
                "produces": [
                    "application/json"
                ],
                "summary": "Resume rollout by configuration name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the configuration",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/model.ConfigurationResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/rollouts/{name}/start": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "summary": "Start rollout by configuration name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the configuration",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "the options for the rollout",
                        "name": "options",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/model.RolloutOptions"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/model.ConfigurationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/rollouts/{name}/status": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Status of configuration rollout by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the configuration",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/model.ConfigurationResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/rollouts/{name}/update": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "summary": "Update rollout by configuration name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the configuration",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ConfigurationResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/secret-keys": {
            "get": {
                "description": "Gets all secret keys for the account",
                "produces": [
                    "application/json"
                ],
                "summary": "Get Secret Keys",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.GetSecretKeysResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Adds a new secret key to the account",
                "produces": [
                    "application/json"
                ],
                "summary": "Add Secret Key",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AddSecretKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/secret-keys/{key}": {
            "delete": {
                "description": "Deletes a secret key from the account",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete Secret Key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the key to delete",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.GetSecretKeysResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/secret-keys/{key}/default": {
            "post": {
                "summary": "Set Default Secret Key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the secret key to set as default",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Set default request processed, no content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/source-types": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "List source types",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SourceTypesResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/source-types/{name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get source type by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the source type",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SourceTypeResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete source type by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the source type to delete",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Delete, no content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sources": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "List Sources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SourcesResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sources/{name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get Source by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the Source",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SourceResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete source by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the source to delete",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Delete, no content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/system/v1/agent-versions/{name}": {
            "delete": {
                "produces": [
                    "application/json"
                ],
                "summary": "Deletes an agent version.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the agent version to delete",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Delete, no content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/system/v1/license-key": {
            "put": {
                "description": "Updates the current license key",
                "produces": [
                    "application/json"
                ],
                "summary": "Update System License Key",
                "deprecated": true,
                "parameters": [
                    {
                        "description": "the key of the license to use",
                        "name": "licenseKey",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful update, no content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/system/v1/offline-agent-version/{version}": {
            "post": {
                "description": "Uploads artifacts for an offline agent upgrade as a multipart form. Use /system/v1/offline-agent-version/{version}/stream instead.",
                "produces": [
                    "application/json"
                ],
                "summary": "Uploads artifacts for an offline agent upgrade.",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "file",
                        "description": "Artifact archive to upload",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Agent version being uploaded",
                        "name": "version",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful upload, no content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/system/v1/offline-agent-version/{version}/stream": {
            "post": {
                "description": "Uploads artifacts for an offline agent upgrade. The gzipped artifact package should be streamed directly as the http body.",
                "consumes": [
                    "application/octet-stream"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Uploads artifacts for an offline agent upgrade.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Agent version being uploaded",
                        "name": "version",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful upload, no content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "List users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UsersResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "The /users route will add a new user to an existing account.\nIf the create flag is set, and the user doesn't already exist, it will create the user and\nadd a new login in addition to the the account binding.",
                "produces": [
                    "application/json"
                ],
                "summary": "Add User to Current Account",
                "parameters": [
                    {
                        "description": "Add User Payload",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/model.AddUserPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ApplyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Tried to update a non-existing user, use the create flag to create a new user",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get user by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the id of the user",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete user by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the id of the user to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Delete, no content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/version": {
            "get": {
                "description": "Returns the current bindplane version of the server.",
                "produces": [
                    "application/json"
                ],
                "summary": "Server version",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{kind}/{name}/history": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get the history of a resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the kind of the resource",
                        "name": "kind",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the name of the resource",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.HistoryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Account": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "example": "string"
                },
                "kind": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Kind"
                        }
                    ],
                    "example": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/model.Metadata"
                },
                "spec": {
                    "$ref": "#/definitions/model.AccountSpec"
                },
                "status": {
                    "$ref": "#/definitions/model.NoStatus"
                }
            }
        },
        "model.AccountResponse": {
            "type": "object",
            "properties": {
                "account": {
                    "$ref": "#/definitions/model.Account"
                }
            }
        },
        "model.AccountSpec": {
            "type": "object",
            "properties": {
                "alternateSecretKeys": {
                    "description": "AlternateSecretKeys are additional secret keys that can be used for an account.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "secretKey": {
                    "description": "SecretKey is the default secret key for an account.\nThis will be used when generating the install command for agents.",
                    "type": "string"
                }
            }
        },
        "model.AccountsForOrganizationResponse": {
            "description": "Body of the response to retrieve all accounts associated with an organization",
            "type": "object",
            "properties": {
                "accounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Account"
                    }
                }
            }
        },
        "model.AccountsResponse": {
            "type": "object",
            "properties": {
                "accounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Account"
                    }
                }
            }
        },
        "model.AddSecretKeyResponse": {
            "type": "object",
            "properties": {
                "secretKey": {
                    "description": "SecretKey is the secret key that was added.",
                    "type": "string"
                }
            }
        },
        "model.AddUserPayload": {
            "description": "Body of the request to add a user to an account",
            "type": "object",
            "properties": {
                "create": {
                    "description": "Create should be true if the user should be created if they do not exist",
                    "type": "boolean"
                },
                "email": {
                    "description": "Email address of the user to add",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the user to add",
                    "type": "string"
                }
            }
        },
        "model.AdditionalInfo": {
            "type": "object",
            "properties": {
                "documentation": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.DocumentationLink"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "string"
                }
            }
        },
        "model.Agent": {
            "type": "object",
            "properties": {
                "arch": {
                    "type": "string"
                },
                "configuration": {
                    "description": "tracked by BindPlane"
                },
                "configurationStatus": {
                    "$ref": "#/definitions/model.ConfigurationVersions"
                },
                "connectedAt": {
                    "type": "string"
                },
                "disconnectedAt": {
                    "type": "string"
                },
                "errorMessage": {
                    "type": "string"
                },
                "features": {
                    "$ref": "#/definitions/model.AgentFeatures"
                },
                "hostname": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "labels": {
                    "description": "Labels are the current labels for the agent.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Labels"
                        }
                    ]
                },
                "labels_bootstrapped": {
                    "description": "LabelsBootstrapped is true if the labels have been \"bootstrapped\" (meaning, the initial labels have been set).\nWhen this is true, labels in the agent description are not applied. This is set to true after the initial agent labels are set.",
                    "type": "boolean"
                },
                "macAddress": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "operatingSystem": {
                    "type": "string"
                },
                "pendingLabels": {
                    "description": "PendingLabels are deprecated, and should not be used.\nInstead, merge extra labels into Labels to modify the agent labels.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Labels"
                        }
                    ]
                },
                "platform": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "remoteAddress": {
                    "type": "string"
                },
                "reported_at": {
                    "description": "ReportedAt is only available in boltstore.",
                    "type": "string"
                },
                "state": {},
                "status": {
                    "description": "reported by Status messages",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.AgentStatus"
                        }
                    ]
                },
                "type": {
                    "$ref": "#/definitions/model.AgentServiceName"
                },
                "upgrade": {
                    "description": "Upgrade stores information about an agent upgrade",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.AgentUpgrade"
                        }
                    ]
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "model.AgentDownload": {
            "type": "object",
            "properties": {
                "hash": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "model.AgentFeatures": {
            "type": "integer",
            "enum": [
                1,
                2,
                4,
                8,
                16,
                32,
                64,
                128,
                256,
                512,
                257
            ],
            "x-enum-varnames": [
                "AgentSupportsUpgrade",
                "AgentSupportsSnapshots",
                "AgentSupportsMeasurements",
                "AgentSupportsLogBasedMetrics",
                "AgentSupportsSnapshotSearch",
                "AgentSupportsRemoteConfiguration",
                "AgentReportsRemoteConfiguration",
                "AgentReportsHealthMetrics",
                "AgentSupportsEnvProvider",
                "AgentSupportsCustomMessageMeasurements",
                "AgentFeaturesDefault"
            ]
        },
        "model.AgentInstaller": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string"
                }
            }
        },
        "model.AgentLabelsPayload": {
            "type": "object",
            "properties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "env": "production",
                        "region": "us-west-1",
                        "team": ""
                    }
                }
            }
        },
        "model.AgentLabelsResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "labels": {
                    "$ref": "#/definitions/model.Labels"
                }
            }
        },
        "model.AgentResponse": {
            "type": "object",
            "properties": {
                "agent": {
                    "$ref": "#/definitions/model.Agent"
                }
            }
        },
        "model.AgentSelector": {
            "type": "object",
            "properties": {
                "matchLabels": {
                    "$ref": "#/definitions/model.MatchLabels"
                }
            }
        },
        "model.AgentServiceName": {
            "type": "string",
            "enum": [
                "com.observiq.collector",
                "otelcontribcol"
            ],
            "x-enum-varnames": [
                "AgentTypeBindPlaneAgent",
                "AgentTypeOtelCollectorContrib"
            ]
        },
        "model.AgentStatus": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                4,
                5,
                6,
                7,
                8
            ],
            "x-enum-varnames": [
                "Disconnected",
                "Connected",
                "Error",
                "ComponentFailed",
                "Deleted",
                "Configuring",
                "Upgrading",
                "Pending"
            ]
        },
        "model.AgentUpgrade": {
            "type": "object",
            "properties": {
                "allPackagesHash": {
                    "description": "AllPackagesHash is the hash of the packages sent to the agent to upgrade",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "error": {
                    "description": "Error is set if there were errors upgrading the agent",
                    "type": "string"
                },
                "status": {
                    "description": "Status indicates the progress of the agent upgrade",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.AgentUpgradeStatus"
                        }
                    ]
                },
                "version": {
                    "description": "Version is used to indicate that an agent should be or is being upgraded. The agent status will be set to Upgrading\nwhen the upgrade begins.",
                    "type": "string"
                }
            }
        },
        "model.AgentUpgradeStatus": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "UpgradePending",
                "UpgradeStarted",
                "UpgradeFailed"
            ]
        },
        "model.AgentVersion": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "example": "string"
                },
                "kind": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Kind"
                        }
                    ],
                    "example": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/model.Metadata"
                },
                "spec": {
                    "description": "Spec TODO(doc)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.AgentVersionSpec"
                        }
                    ]
                },
                "status": {
                    "$ref": "#/definitions/model.NoStatus"
                }
            }
        },
        "model.AgentVersionResponse": {
            "type": "object",
            "properties": {
                "agentVersion": {
                    "$ref": "#/definitions/model.AgentVersion"
                }
            }
        },
        "model.AgentVersionSpec": {
            "type": "object",
            "properties": {
                "download": {
                    "description": "Map of platform to download URL and hash",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/model.AgentDownload"
                    }
                },
                "draft": {
                    "type": "boolean"
                },
                "installer": {
                    "description": "Map of platform to installer script URL",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/model.AgentInstaller"
                    }
                },
                "prerelease": {
                    "type": "boolean"
                },
                "releaseDate": {
                    "description": "ReleaseDate is an RFC3339 encoded date in a string",
                    "type": "string"
                },
                "releaseNotesURL": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "model.AgentVersionsResponse": {
            "type": "object",
            "properties": {
                "agentVersions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.AgentVersion"
                    }
                }
            }
        },
        "model.AgentsResponse": {
            "type": "object",
            "properties": {
                "agents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Agent"
                    }
                }
            }
        },
        "model.AnyResource": {
            "type": "object"
        },
        "model.ApplyPayload": {
            "type": "object",
            "properties": {
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.AnyResource"
                    }
                }
            }
        },
        "model.ApplyResponse": {
            "type": "object",
            "properties": {
                "updates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ResourceStatus"
                    }
                }
            }
        },
        "model.AuditEvent": {
            "type": "object",
            "properties": {
                "account": {
                    "description": "Account is the account that the event occurred on. May be nil in the case of single-account.",
                    "type": "string"
                },
                "action": {
                    "description": "Action is the action that was taken on the resource",
                    "type": "string"
                },
                "configuration": {
                    "description": "Configuration is the name of the configuration affected. This may be nil if there is not associated configuration.",
                    "type": "string"
                },
                "description": {
                    "description": "Description is the friendly name of the resource",
                    "type": "string"
                },
                "id": {
                    "description": "ID is a ULID uniquely identifying this event",
                    "type": "string"
                },
                "resourceKind": {
                    "description": "ResourceKind is the resource that was modified",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Kind"
                        }
                    ]
                },
                "resourceName": {
                    "description": "ResourceName is the resource name + friendly name of the resource",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Timestamp is the time this event occurred",
                    "type": "string"
                },
                "user": {
                    "description": "User is the user that modified the resource",
                    "type": "string"
                }
            }
        },
        "model.BulkAgentLabelsPayload": {
            "description": "Body of the request to update labels for multiple agents",
            "type": "object",
            "properties": {
                "ids": {
                    "description": "IDs is the list of agent IDs to update",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "agent1",
                        "agent2"
                    ]
                },
                "labels": {
                    "description": "Labels are name/value pairs of labels to update. Empty values indicate that the label should be deleted.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "env": "production",
                        "region": "us-west-1",
                        "team": ""
                    }
                },
                "overwrite": {
                    "description": "Overwrite is true if the labels should be overwritten. Must be true if modifying a pre-existing label value.",
                    "type": "boolean"
                },
                "query": {
                    "description": "Query is a query string to find agents to update, e.g. \"env:production\". A query can\nmatch fields or labels on the agent.",
                    "type": "string",
                    "example": "env:production"
                },
                "selector": {
                    "description": "Selector is the selector to find agents to update, e.g. \"env=production\". A selector\nmatches labels on the agent and supports \"!\", \"=\", \"==\", \"in\", \"!=\", \"notin\", and\n\"exists\" operators.",
                    "type": "string",
                    "example": "env=production"
                }
            }
        },
        "model.BulkAgentLabelsResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.Configuration": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "example": "string"
                },
                "kind": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Kind"
                        }
                    ],
                    "example": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/model.Metadata"
                },
                "spec": {
                    "description": "Spec contains the spec for the Configuration",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ConfigurationSpec"
                        }
                    ]
                },
                "status": {
                    "$ref": "#/definitions/model.ConfigurationStatus"
                }
            }
        },
        "model.ConfigurationResponse": {
            "type": "object",
            "properties": {
                "configuration": {
                    "$ref": "#/definitions/model.Configuration"
                },
                "raw": {
                    "type": "string"
                }
            }
        },
        "model.ConfigurationSpec": {
            "type": "object",
            "properties": {
                "connectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ResourceConfiguration"
                    }
                },
                "contentType": {
                    "type": "string"
                },
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ResourceConfiguration"
                    }
                },
                "disableLegacyEnvVarNormalization": {
                    "type": "boolean"
                },
                "extensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ResourceConfiguration"
                    }
                },
                "measurementInterval": {
                    "type": "string"
                },
                "processors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ResourceConfiguration"
                    }
                },
                "raw": {
                    "type": "string"
                },
                "rollout": {
                    "$ref": "#/definitions/model.ResourceConfiguration"
                },
                "selector": {
                    "$ref": "#/definitions/model.AgentSelector"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ResourceConfiguration"
                    }
                }
            }
        },
        "model.ConfigurationStatus": {
            "type": "object",
            "properties": {
                "current": {
                    "description": "Current will be set to true on read if the configuration is the current version",
                    "type": "boolean"
                },
                "currentVersion": {
                    "description": "CurrentVersion is the version of the configuration that has most recently completed a rollout",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Version"
                        }
                    ]
                },
                "latest": {
                    "description": "Latest will be set to true on read if the configuration is the latest version",
                    "type": "boolean"
                },
                "pending": {
                    "description": "Pending will be set to true on read if the configuration is the pending version",
                    "type": "boolean"
                },
                "pendingVersion": {
                    "description": "PendingVersion will be set to the version of a rollout that is in progress. It will be set to 0 when the rollout\ncompletes.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Version"
                        }
                    ]
                },
                "rollout": {
                    "description": "Rollout contains status for the rollout of this configuration",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Rollout"
                        }
                    ]
                }
            }
        },
        "model.ConfigurationVersions": {
            "type": "object",
            "properties": {
                "current": {
                    "description": "Current is the configuration currently applied to the agent.",
                    "type": "string"
                },
                "future": {
                    "description": "Future is the configuration that will be assigned to this agent when the rollout assigns the new configuration to\nthe agent. Once the rollout assigns the configuration, Pending will be set to this value and this will be cleared.",
                    "type": "string"
                },
                "pending": {
                    "description": "Pending is the configuration that is assigned to the agent but may not be applied. Once this configuration is\nconfirmed, Current will be set to this value and this will be cleared.",
                    "type": "string"
                },
                "pendingSetAt": {
                    "type": "string"
                }
            }
        },
        "model.ConfigurationsResponse": {
            "type": "object",
            "properties": {
                "configurations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Configuration"
                    }
                }
            }
        },
        "model.DeleteAgentsPayload": {
            "type": "object",
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.DeleteAgentsResponse": {
            "type": "object",
            "properties": {
                "agents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Agent"
                    }
                }
            }
        },
        "model.DeletePayload": {
            "type": "object"
        },
        "model.DeleteResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ResourceStatus"
                    }
                }
            }
        },
        "model.Destination": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "example": "string"
                },
                "kind": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Kind"
                        }
                    ],
                    "example": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/model.Metadata"
                },
                "spec": {
                    "$ref": "#/definitions/model.ParameterizedSpec"
                },
                "status": {
                    "$ref": "#/definitions/model.VersionStatus"
                }
            }
        },
        "model.DestinationResponse": {
            "type": "object",
            "properties": {
                "destination": {
                    "$ref": "#/definitions/model.Destination"
                }
            }
        },
        "model.DestinationType": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "example": "string"
                },
                "kind": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Kind"
                        }
                    ],
                    "example": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/model.Metadata"
                },
                "spec": {
                    "$ref": "#/definitions/model.ResourceTypeSpec"
                },
                "status": {
                    "$ref": "#/definitions/model.VersionStatus"
                }
            }
        },
        "model.DestinationTypeResponse": {
            "type": "object",
            "properties": {
                "destinationType": {
                    "$ref": "#/definitions/model.DestinationType"
                }
            }
        },
        "model.DestinationTypesResponse": {
            "type": "object",
            "properties": {
                "destinationTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.DestinationType"
                    }
                }
            }
        },
        "model.DestinationsResponse": {
            "type": "object",
            "properties": {
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Destination"
                    }
                }
            }
        },
        "model.DocumentationLink": {
            "type": "object",
            "properties": {
                "text": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "model.ErrorResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.Extension": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "example": "string"
                },
                "kind": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Kind"
                        }
                    ],
                    "example": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/model.Metadata"
                },
                "spec": {
                    "$ref": "#/definitions/model.ParameterizedSpec"
                },
                "status": {
                    "$ref": "#/definitions/model.VersionStatus"
                }
            }
        },
        "model.ExtensionResponse": {
            "type": "object",
            "properties": {
                "extension": {
                    "$ref": "#/definitions/model.Extension"
                }
            }
        },
        "model.ExtensionType": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "example": "string"
                },
                "kind": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Kind"
                        }
                    ],
                    "example": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/model.Metadata"
                },
                "spec": {
                    "$ref": "#/definitions/model.ResourceTypeSpec"
                },
                "status": {
                    "$ref": "#/definitions/model.VersionStatus"
                }
            }
        },
        "model.ExtensionTypeResponse": {
            "type": "object",
            "properties": {
                "extensionType": {
                    "$ref": "#/definitions/model.ExtensionType"
                }
            }
        },
        "model.ExtensionTypesResponse": {
            "type": "object",
            "properties": {
                "extensionTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ExtensionType"
                    }
                }
            }
        },
        "model.ExtensionsResponse": {
            "type": "object",
            "properties": {
                "extensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Extension"
                    }
                }
            }
        },
        "model.GetOrganizationResponse": {
            "description": "Body of the response to get an organization by name",
            "type": "object",
            "properties": {
                "organization": {
                    "$ref": "#/definitions/model.Organization"
                }
            }
        },
        "model.GetOrganizationsResponse": {
            "description": "Body of the response to get all organizations a user belongs to",
            "type": "object",
            "properties": {
                "organizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Organization"
                    }
                }
            }
        },
        "model.GetSecretKeysResponse": {
            "type": "object",
            "properties": {
                "alternateSecretKeys": {
                    "description": "AlternateSecretKeys are additional secret keys that can be used for an account.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "defaultSecretKey": {
                    "description": "DefaultSecretKey is the default secret key for the account.",
                    "type": "string"
                }
            }
        },
        "model.HistoryResponse": {
            "type": "object",
            "properties": {
                "versions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.AnyResource"
                    }
                }
            }
        },
        "model.InsertOrganizationPayload": {
            "description": "Body of the request to insert a new organization",
            "type": "object",
            "properties": {
                "eulaAccepted": {
                    "type": "boolean"
                },
                "organizationName": {
                    "type": "string"
                }
            }
        },
        "model.InsertOrganizationResponse": {
            "description": "Body of the response to create an organization and an account",
            "type": "object",
            "properties": {
                "account": {
                    "$ref": "#/definitions/model.Account"
                },
                "organization": {
                    "$ref": "#/definitions/model.Organization"
                }
            }
        },
        "model.InstallCommandResponse": {
            "type": "object",
            "properties": {
                "alternateCommand": {
                    "type": "string"
                },
                "command": {
                    "type": "string"
                }
            }
        },
        "model.Kind": {
            "type": "string",
            "enum": [
                "Profile",
                "Context",
                "Configuration",
                "Agent",
                "AgentType",
                "AgentVersion",
                "Source",
                "Processor",
                "Connector",
                "Destination",
                "Extension",
                "SourceType",
                "ProcessorType",
                "ConnectorType",
                "DestinationType",
                "ExtensionType",
                "RecommendationType",
                "Unknown",
                "Rollout",
                "RolloutType",
                "Organization",
                "Account",
                "Invitation",
                "Login",
                "User",
                "AccountOrganizationBinding",
                "UserOrganizationBinding",
                "UserAccountBinding",
                "AuditTrail"
            ],
            "x-enum-varnames": [
                "KindProfile",
                "KindContext",
                "KindConfiguration",
                "KindAgent",
                "KindAgentType",
                "KindAgentVersion",
                "KindSource",
                "KindProcessor",
                "KindConnector",
                "KindDestination",
                "KindExtension",
                "KindSourceType",
                "KindProcessorType",
                "KindConnectorType",
                "KindDestinationType",
                "KindExtensionType",
                "KindRecommendationType",
                "KindUnknown",
                "KindRollout",
                "KindRolloutType",
                "KindOrganization",
                "KindAccount",
                "KindInvitation",
                "KindLogin",
                "KindUser",
                "KindAccountOrganizationBinding",
                "KindUserOrganizationBinding",
                "KindUserAccountBinding",
                "KindAuditEvent"
            ]
        },
        "model.Labels": {
            "type": "object"
        },
        "model.MatchLabels": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "model.Metadata": {
            "type": "object",
            "properties": {
                "additionalInfo": {
                    "$ref": "#/definitions/model.AdditionalInfo"
                },
                "dateModified": {
                    "type": "string"
                },
                "deprecated": {
                    "description": "Deprecated indicates that this resource is deprecated and should not be used. Deprecated resources should contain\nadditional information about why the resource is deprecated and what should be used instead.\nNote: Ironically, the Deprecated field is itself deprecated. Use Stability instead.",
                    "type": "boolean"
                },
                "description": {
                    "type": "string",
                    "example": "string"
                },
                "displayName": {
                    "type": "string",
                    "example": "string"
                },
                "hash": {
                    "description": "Hash is a hex formatted sha256 Hash of the json-encoded spec that is used to determine if the spec has changed.",
                    "type": "string"
                },
                "icon": {
                    "type": "string",
                    "example": "string"
                },
                "id": {
                    "type": "string",
                    "example": "string"
                },
                "labels": {
                    "$ref": "#/definitions/model.Labels"
                },
                "name": {
                    "type": "string",
                    "example": "string"
                },
                "resourceDocLink": {
                    "type": "string",
                    "example": "string"
                },
                "stability": {
                    "description": "Stability is the stability of the resource, one of development, alpha, beta, stable, or\ndeprecated. This should be used instead of the Deprecated field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Stability"
                        }
                    ],
                    "example": "string"
                },
                "version": {
                    "description": "Version is a 1-based integer that is incremented each time the spec is changed.",
                    "type": "integer"
                }
            }
        },
        "model.MetricCategory": {
            "type": "object",
            "properties": {
                "column": {
                    "description": "0 or 1",
                    "type": "integer"
                },
                "label": {
                    "type": "string"
                },
                "metrics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.MetricOption"
                    }
                }
            }
        },
        "model.MetricOption": {
            "type": "object",
            "properties": {
                "defaultDisabled": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "kpi": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.NewAccountResponse": {
            "type": "object",
            "properties": {
                "account": {
                    "$ref": "#/definitions/model.Account"
                }
            }
        },
        "model.NoStatus": {
            "type": "object"
        },
        "model.Organization": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "example": "string"
                },
                "kind": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Kind"
                        }
                    ],
                    "example": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/model.Metadata"
                },
                "spec": {
                    "$ref": "#/definitions/model.OrganizationSpec"
                },
                "status": {
                    "$ref": "#/definitions/model.NoStatus"
                }
            }
        },
        "model.OrganizationSpec": {
            "type": "object"
        },
        "model.Parameter": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name is the name of the parameter",
                    "type": "string"
                },
                "sensitive": {
                    "description": "Sensitive will be true if the value is sensitive and should be masked when printed.",
                    "type": "boolean"
                },
                "value": {
                    "description": "Value could be any of the following: string, bool, int, enum (string), float, []string, map"
                }
            }
        },
        "model.ParameterDefinition": {
            "type": "object",
            "properties": {
                "advancedConfig": {
                    "type": "boolean"
                },
                "default": {
                    "description": "Must be valid according to Type \u0026 ValidValues"
                },
                "description": {
                    "type": "string"
                },
                "documentation": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.DocumentationLink"
                    }
                },
                "hidden": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "$ref": "#/definitions/model.ParameterOptions"
                },
                "properties": {
                    "description": "Properties are parameter specific properties that are not part of the standard\nparameter definition. They are similar to Options, but more flexible because they do\nnot need to be defined for all parameter types.",
                    "type": "object",
                    "additionalProperties": {}
                },
                "relevantIf": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.RelevantIfCondition"
                    }
                },
                "required": {
                    "type": "boolean"
                },
                "type": {
                    "description": "\"string\", \"int\", \"bool\", \"strings\", or \"enum\"",
                    "type": "string"
                },
                "validValues": {
                    "description": "only useable if Type == \"enum\"",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.ParameterOptions": {
            "type": "object",
            "properties": {
                "creatable": {
                    "description": "Creatable will modify the \"enum\" parameter from a select to\na creatable select where a user can specify a custom value",
                    "type": "boolean"
                },
                "gridColumns": {
                    "description": "GridColumns will specify the number of flex-grid columns the\ncontrol will take up, must be an integer between 1 and 12 or\nunspecified.",
                    "type": "integer"
                },
                "horizontalDivider": {
                    "description": "HorizontalDivider will add a horizontal divider after the parameter at full\nwidth of the form.",
                    "type": "boolean"
                },
                "labels": {
                    "description": "Labels indicate labels that can be used when rendering the parameter. This was added for the \"map\" parameter type\nto make the \"key\" and \"value\" labels configurable.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "metricCategories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.MetricCategory"
                    }
                },
                "multiline": {
                    "description": "Multiline indicates that a multiline textarea should be used for editing a \"string\" parameter.",
                    "type": "boolean"
                },
                "ottlContext": {
                    "description": "OttlContext indicates which field to use when auto-populating an ottlField parameter.",
                    "type": "string"
                },
                "password": {
                    "description": "Password indicates the string field is for a password and will be hidden by the UI.\nOnly applies to string parameters.\nDeprecated, use Sensitive instead.",
                    "type": "boolean"
                },
                "processorContext": {
                    "description": "ProcessorContext indicates which processor is used to handle the parameter.",
                    "type": "string"
                },
                "sectionHeader": {
                    "description": "SectionHeader is used to indicate that the bool parameter input is\na switch for further configuration for UI styling.",
                    "type": "boolean"
                },
                "sensitive": {
                    "description": "Sensitive indicates that the field is sensitive and will be masked with (sensitive) in the response.",
                    "type": "boolean"
                },
                "subHeader": {
                    "description": "SubHeader will place a subheader above the parameter.",
                    "type": "string"
                },
                "trackUnchecked": {
                    "description": "TrackUnchecked will modify the \"enums\" parameter to store the\nunchecked values as the value.",
                    "type": "boolean"
                },
                "variant": {
                    "description": "Variant indicates the variant of the input for parameters that support multiple input\ntypes or styles.\n\"condition\" parameter:  input can be \"expanded\" or \"collapsed\".\n\"telemetrySelector\" parameter: input can be \"exclusive\", meaning only one value can be selected.",
                    "type": "string"
                }
            }
        },
        "model.ParameterizedSpec": {
            "type": "object",
            "properties": {
                "disabled": {
                    "type": "boolean"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Parameter"
                    }
                },
                "processors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ResourceConfiguration"
                    }
                },
                "recommendation": {
                    "description": "If this resource (currently only processors) was added to a configuration based on a recommendation, this field\nis set to the name of that recommendation type.",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "model.PatchAgentVersionsRequest": {
            "type": "object",
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "model.PatchOrganizationPayload": {
            "description": "Body of the request to update organization metadata",
            "type": "object",
            "properties": {
                "name": {
                    "description": "The updated organization name",
                    "type": "string"
                }
            }
        },
        "model.PhaseAgentCount": {
            "type": "object",
            "properties": {
                "initial": {
                    "type": "integer"
                },
                "maximum": {
                    "type": "integer"
                },
                "multiplier": {
                    "type": "number"
                }
            }
        },
        "model.PostAgentVersionRequest": {
            "type": "object",
            "properties": {
                "version": {
                    "type": "string"
                }
            }
        },
        "model.Processor": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "example": "string"
                },
                "kind": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Kind"
                        }
                    ],
                    "example": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/model.Metadata"
                },
                "spec": {
                    "$ref": "#/definitions/model.ParameterizedSpec"
                },
                "status": {
                    "$ref": "#/definitions/model.VersionStatus"
                }
            }
        },
        "model.ProcessorResponse": {
            "type": "object",
            "properties": {
                "processor": {
                    "$ref": "#/definitions/model.Processor"
                }
            }
        },
        "model.ProcessorType": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "example": "string"
                },
                "kind": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Kind"
                        }
                    ],
                    "example": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/model.Metadata"
                },
                "spec": {
                    "$ref": "#/definitions/model.ResourceTypeSpec"
                },
                "status": {
                    "$ref": "#/definitions/model.VersionStatus"
                }
            }
        },
        "model.ProcessorTypeResponse": {
            "type": "object",
            "properties": {
                "processorType": {
                    "$ref": "#/definitions/model.ProcessorType"
                }
            }
        },
        "model.ProcessorTypesResponse": {
            "type": "object",
            "properties": {
                "processorTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ProcessorType"
                    }
                }
            }
        },
        "model.ProcessorsResponse": {
            "type": "object",
            "properties": {
                "processors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Processor"
                    }
                }
            }
        },
        "model.RecommendationResources": {
            "type": "object",
            "properties": {
                "destinationTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sourceTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.RecommendationType": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "example": "string"
                },
                "kind": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Kind"
                        }
                    ],
                    "example": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/model.Metadata"
                },
                "spec": {
                    "$ref": "#/definitions/model.RecommendationTypeSpec"
                },
                "status": {
                    "$ref": "#/definitions/model.VersionStatus"
                }
            }
        },
        "model.RecommendationTypeResponse": {
            "type": "object",
            "properties": {
                "recommendationType": {
                    "$ref": "#/definitions/model.RecommendationType"
                }
            }
        },
        "model.RecommendationTypeSpec": {
            "type": "object",
            "properties": {
                "acceptanceCriteria": {
                    "description": "Either 'diff', 'reduced', 'resource', 'diff-resource', or 'none'",
                    "type": "string"
                },
                "candidateGeneratorFunc": {
                    "description": "CandidateGeneratorFunc is the key of the target function in functions.go used to generate candidates at runtime",
                    "type": "string"
                },
                "pipelinePosition": {
                    "description": "PipelinePosition is the position in the pipeline that the recommendation is for, either 'source' or 'destination'",
                    "type": "string"
                },
                "pipelineType": {
                    "description": "A subset of ['logs', 'metrics', 'traces']",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "resources": {
                    "description": "Resource based recommendations will have a list of resources that the configuration\nmust have in order to be recommended",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.RecommendationResources"
                        }
                    ]
                },
                "targetResource": {
                    "description": "TargetResource is the resource type that the recommendation is for",
                    "type": "string"
                },
                "testProcessor": {
                    "$ref": "#/definitions/model.ResourceConfiguration"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "model.RecommendationTypesResponse": {
            "type": "object",
            "properties": {
                "recommendationTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.RecommendationType"
                    }
                }
            }
        },
        "model.RelevantIfCondition": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "value": {}
            }
        },
        "model.ResourceConfiguration": {
            "type": "object",
            "properties": {
                "disabled": {
                    "type": "boolean"
                },
                "displayName": {
                    "description": "DisplayName is a friendly name of the resource that will be displayed in the UI",
                    "type": "string"
                },
                "id": {
                    "description": "ID will be generated and is used to uniquely identify the resource",
                    "type": "string"
                },
                "name": {
                    "description": "Name must be specified if this is a reference to another resource by name",
                    "type": "string"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Parameter"
                    }
                },
                "processors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ResourceConfiguration"
                    }
                },
                "recommendation": {
                    "description": "If this resource (currently only processors) was added to a configuration based on a recommendation, this field\nis set to the name of that recommendation type.",
                    "type": "string"
                },
                "routes": {
                    "description": "Routes connect resources in a configuration",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Routes"
                        }
                    ]
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "model.ResourceResponse": {
            "type": "object",
            "properties": {
                "resource": {}
            }
        },
        "model.ResourceStatus": {
            "type": "object",
            "properties": {
                "reason": {
                    "description": "Reason will be set if status is invalid or error",
                    "type": "string",
                    "example": "string"
                },
                "resource": {
                    "description": "Resource is the resource that was updated"
                },
                "status": {
                    "description": "Status is the status of the resource after the update",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.UpdateStatus"
                        }
                    ],
                    "example": "error"
                }
            }
        },
        "model.ResourceTypeOutput": {
            "type": "object",
            "properties": {
                "connectors": {
                    "type": "string"
                },
                "emits": {
                    "description": "Emits can be used to indicate that a connector emits different kinds of telemetry\nthat it consumes. If empty, it is assumed that the connector emits the same kind of\ntelemetry that it consumes.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/otel.PipelineType"
                    }
                },
                "exporters": {
                    "type": "string"
                },
                "extensions": {
                    "type": "string"
                },
                "processors": {
                    "type": "string"
                },
                "receivers": {
                    "type": "string"
                }
            }
        },
        "model.ResourceTypeSpec": {
            "type": "object",
            "properties": {
                "featureGate": {
                    "description": "FeatureGate is a string that is used to gate the availability of this resource type.",
                    "type": "string"
                },
                "logs": {
                    "description": "individual",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ResourceTypeOutput"
                        }
                    ]
                },
                "logs+metrics": {
                    "description": "pairs (alphabetical order)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ResourceTypeOutput"
                        }
                    ]
                },
                "logs+metrics+traces": {
                    "description": "all three (alphabetical order)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ResourceTypeOutput"
                        }
                    ]
                },
                "logs+traces": {
                    "$ref": "#/definitions/model.ResourceTypeOutput"
                },
                "metrics": {
                    "$ref": "#/definitions/model.ResourceTypeOutput"
                },
                "metrics+traces": {
                    "$ref": "#/definitions/model.ResourceTypeOutput"
                },
                "parameters": {
                    "description": "Parameters currently uses the model from stanza. Eventually we will probably create a separate definition for\nBindPlane.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ParameterDefinition"
                    }
                },
                "supportedPlatforms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "traces": {
                    "$ref": "#/definitions/model.ResourceTypeOutput"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "model.ResourcesResponse": {
            "type": "object",
            "properties": {
                "resources": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "model.Rollout": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name will be set to the Name of the configuration when requested via Configuration.Rollout()",
                    "type": "string"
                },
                "options": {
                    "description": "Options are set when the Rollout is created based on the rollout options specified in the configuration",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.RolloutOptions"
                        }
                    ]
                },
                "phase": {
                    "description": "Phase starts at zero and increments until all agents are updated. In each phase, initial*multiplier^phase agents will be updated.",
                    "type": "integer"
                },
                "progress": {
                    "description": "Progress is the current progress of the rollout. The represents the overall progress\nof the rollout. If this is a progressive rollout, this will represent the sum of all\nstages.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.RolloutProgress"
                        }
                    ]
                },
                "stage": {
                    "description": "Stage is the index of the current stage of the rollout",
                    "type": "integer"
                },
                "stages": {
                    "description": "Stages are the RolloutProgress (Completed, Errors, Pending, and Waiting agents), Name and Labels for each stage of a progressive Rollout",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.RolloutStage"
                    }
                },
                "startedAt": {
                    "description": "StartedAt is the time the rollout was started",
                    "type": "string"
                },
                "status": {
                    "description": "Status is the status of the rollout",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.RolloutStatus"
                        }
                    ]
                }
            }
        },
        "model.RolloutOptions": {
            "type": "object",
            "properties": {
                "maxErrors": {
                    "description": "MaxErrors is the maximum number of failed agents before the rollout will be considered an error",
                    "type": "integer"
                },
                "phaseAgentCount": {
                    "description": "PhaseAgentCount determines the rate at which agents will be updated during a rollout.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.PhaseAgentCount"
                        }
                    ]
                }
            }
        },
        "model.RolloutProgress": {
            "type": "object",
            "properties": {
                "completed": {
                    "description": "Completed is the number of agents with new version with Connected status",
                    "type": "integer"
                },
                "errors": {
                    "description": "Errors is the number of agents with new version with Error Status",
                    "type": "integer"
                },
                "pending": {
                    "description": "Pending is the number of agents that are currently being configured",
                    "type": "integer"
                },
                "waiting": {
                    "description": "Waiting is the number of agents that need to be scheduled for configuration",
                    "type": "integer"
                }
            }
        },
        "model.RolloutStage": {
            "type": "object",
            "properties": {
                "labels": {
                    "description": "Agent labels that will be used to select agents to rollout to this stage",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Labels"
                        }
                    ]
                },
                "name": {
                    "description": "Name of the stage",
                    "type": "string"
                },
                "progress": {
                    "description": "Progress is the current progress of this rollout stage",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.RolloutProgress"
                        }
                    ]
                }
            }
        },
        "model.RolloutStatus": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4,
                5
            ],
            "x-enum-varnames": [
                "RolloutStatusPending",
                "RolloutStatusStarted",
                "RolloutStatusPaused",
                "RolloutStatusError",
                "RolloutStatusStable",
                "RolloutStatusReplaced"
            ]
        },
        "model.Route": {
            "type": "object",
            "properties": {
                "components": {
                    "description": "Components is a list of component paths that identify a unique component in the configuration.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "description": "ID identifies this route in the routing table. It is used by the routing connector to\ncorrelate between conditions and the components connected to that condition. It is\noptional. If specified, it must be unique within the list of routes.",
                    "type": "string"
                }
            }
        },
        "model.Routes": {
            "type": "object",
            "properties": {
                "logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Route"
                    }
                },
                "logs+metrics": {
                    "description": "pairs (alphabetical order)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Route"
                    }
                },
                "logs+metrics+traces": {
                    "description": "all three (alphabetical order)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Route"
                    }
                },
                "logs+traces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Route"
                    }
                },
                "metrics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Route"
                    }
                },
                "metrics+traces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Route"
                    }
                },
                "traces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Route"
                    }
                }
            }
        },
        "model.Source": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "example": "string"
                },
                "kind": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Kind"
                        }
                    ],
                    "example": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/model.Metadata"
                },
                "spec": {
                    "$ref": "#/definitions/model.ParameterizedSpec"
                },
                "status": {
                    "$ref": "#/definitions/model.VersionStatus"
                }
            }
        },
        "model.SourceResponse": {
            "type": "object",
            "properties": {
                "source": {
                    "$ref": "#/definitions/model.Source"
                }
            }
        },
        "model.SourceType": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "example": "string"
                },
                "kind": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Kind"
                        }
                    ],
                    "example": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/model.Metadata"
                },
                "spec": {
                    "$ref": "#/definitions/model.ResourceTypeSpec"
                },
                "status": {
                    "$ref": "#/definitions/model.VersionStatus"
                }
            }
        },
        "model.SourceTypeResponse": {
            "type": "object",
            "properties": {
                "sourceType": {
                    "$ref": "#/definitions/model.SourceType"
                }
            }
        },
        "model.SourceTypesResponse": {
            "type": "object",
            "properties": {
                "sourceTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.SourceType"
                    }
                }
            }
        },
        "model.SourcesResponse": {
            "type": "object",
            "properties": {
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Source"
                    }
                }
            }
        },
        "model.Stability": {
            "type": "string",
            "enum": [
                "development",
                "alpha",
                "beta",
                "stable",
                "deprecated",
                ""
            ],
            "x-enum-varnames": [
                "StabilityDevelopment",
                "StabilityAlpha",
                "StabilityBeta",
                "StabilityStable",
                "StabilityDeprecated",
                "StabilityUnknown"
            ]
        },
        "model.UpdateOrganizationLicenseKeyPayload": {
            "type": "object",
            "properties": {
                "licenseKey": {
                    "type": "string"
                }
            }
        },
        "model.UpdateStatus": {
            "type": "string",
            "enum": [
                "unchanged",
                "configured",
                "created",
                "deleted",
                "not-found",
                "invalid",
                "error",
                "in-use",
                "forbidden",
                "deprecated"
            ],
            "x-enum-varnames": [
                "StatusUnchanged",
                "StatusConfigured",
                "StatusCreated",
                "StatusDeleted",
                "StatusNotFound",
                "StatusInvalid",
                "StatusError",
                "StatusInUse",
                "StatusForbidden",
                "StatusDeprecated"
            ]
        },
        "model.User": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "example": "string"
                },
                "kind": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Kind"
                        }
                    ],
                    "example": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/model.Metadata"
                },
                "spec": {
                    "$ref": "#/definitions/model.UserSpec"
                },
                "status": {
                    "$ref": "#/definitions/model.NoStatus"
                }
            }
        },
        "model.UserResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/model.User"
                }
            }
        },
        "model.UserSpec": {
            "type": "object",
            "properties": {
                "activeAccount": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "requestedMFA": {
                    "description": "RequestedMFA is true if the user has opted-in for multi-factor authentication. This is only supported when Auth0\nis configured as the authentication type.",
                    "type": "boolean"
                }
            }
        },
        "model.UsersForOrganizationResponse": {
            "description": "Body of the response to retrieve all users associated with an organization",
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.User"
                    }
                }
            }
        },
        "model.UsersResponse": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.User"
                    }
                }
            }
        },
        "model.VerifyOrganizationPayload": {
            "description": "Body of the request to verify an organization name",
            "type": "object",
            "properties": {
                "name": {
                    "description": "The organization name to verify",
                    "type": "string"
                }
            }
        },
        "model.VerifyOrganizationResponse": {
            "description": "Body of the response to verify an organization name",
            "type": "object",
            "properties": {
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "model.Version": {
            "type": "integer",
            "enum": [
                -2,
                -1,
                0
            ],
            "x-enum-varnames": [
                "VersionPending",
                "VersionCurrent",
                "VersionLatest"
            ]
        },
        "model.VersionStatus": {
            "type": "object",
            "properties": {
                "latest": {
                    "type": "boolean"
                }
            }
        },
        "otel.PipelineType": {
            "type": "string",
            "enum": [
                "metrics",
                "logs",
                "traces"
            ],
            "x-enum-varnames": [
                "Metrics",
                "Logs",
                "Traces"
            ]
        },
        "rest.ErrorResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}